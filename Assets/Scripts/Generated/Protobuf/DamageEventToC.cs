// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DamageEventToC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from DamageEventToC.proto</summary>
public static partial class DamageEventToCReflection {

  #region Descriptor
  /// <summary>File descriptor for DamageEventToC.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DamageEventToCReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChREYW1hZ2VFdmVudFRvQy5wcm90byLaAQoORGFtYWdlRXZlbnRUb0MSDAoE",
          "dGljaxgBIAEoAxISCgphdHRhY2tlcklkGAIgASgJEhAKCHRhcmdldElkGAMg",
          "ASgJEhIKCmFjdGlvbkNvZGUYBCABKAkSEgoKZGFtYWdlVHlwZRgFIAEoCRIO",
          "CgZkYW1hZ2UYBiABKAMSEgoKaXNDcml0aWNhbBgHIAEoCBIQCghpc0RvZGdl",
          "ZBgIIAEoCBIRCglpc0Jsb2NrZWQYCSABKAgSEwoLcmVtYWluaW5nSFAYCiAB",
          "KAMSDgoGaXNEZWFkGAsgASgIYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DamageEventToC), global::DamageEventToC.Parser, new[]{ "Tick", "AttackerId", "TargetId", "ActionCode", "DamageType", "Damage", "IsCritical", "IsDodged", "IsBlocked", "RemainingHP", "IsDead" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// @auto_generate 
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class DamageEventToC : pb::IMessage<DamageEventToC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DamageEventToC> _parser = new pb::MessageParser<DamageEventToC>(() => new DamageEventToC());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DamageEventToC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DamageEventToCReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DamageEventToC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DamageEventToC(DamageEventToC other) : this() {
    tick_ = other.tick_;
    attackerId_ = other.attackerId_;
    targetId_ = other.targetId_;
    actionCode_ = other.actionCode_;
    damageType_ = other.damageType_;
    damage_ = other.damage_;
    isCritical_ = other.isCritical_;
    isDodged_ = other.isDodged_;
    isBlocked_ = other.isBlocked_;
    remainingHP_ = other.remainingHP_;
    isDead_ = other.isDead_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DamageEventToC Clone() {
    return new DamageEventToC(this);
  }

  /// <summary>Field number for the "tick" field.</summary>
  public const int TickFieldNumber = 1;
  private long tick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Tick {
    get { return tick_; }
    set {
      tick_ = value;
    }
  }

  /// <summary>Field number for the "attackerId" field.</summary>
  public const int AttackerIdFieldNumber = 2;
  private string attackerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AttackerId {
    get { return attackerId_; }
    set {
      attackerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetId" field.</summary>
  public const int TargetIdFieldNumber = 3;
  private string targetId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TargetId {
    get { return targetId_; }
    set {
      targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "actionCode" field.</summary>
  public const int ActionCodeFieldNumber = 4;
  private string actionCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ActionCode {
    get { return actionCode_; }
    set {
      actionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "damageType" field.</summary>
  public const int DamageTypeFieldNumber = 5;
  private string damageType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DamageType {
    get { return damageType_; }
    set {
      damageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 6;
  private long damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "isCritical" field.</summary>
  public const int IsCriticalFieldNumber = 7;
  private bool isCritical_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsCritical {
    get { return isCritical_; }
    set {
      isCritical_ = value;
    }
  }

  /// <summary>Field number for the "isDodged" field.</summary>
  public const int IsDodgedFieldNumber = 8;
  private bool isDodged_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDodged {
    get { return isDodged_; }
    set {
      isDodged_ = value;
    }
  }

  /// <summary>Field number for the "isBlocked" field.</summary>
  public const int IsBlockedFieldNumber = 9;
  private bool isBlocked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsBlocked {
    get { return isBlocked_; }
    set {
      isBlocked_ = value;
    }
  }

  /// <summary>Field number for the "remainingHP" field.</summary>
  public const int RemainingHPFieldNumber = 10;
  private long remainingHP_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RemainingHP {
    get { return remainingHP_; }
    set {
      remainingHP_ = value;
    }
  }

  /// <summary>Field number for the "isDead" field.</summary>
  public const int IsDeadFieldNumber = 11;
  private bool isDead_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDead {
    get { return isDead_; }
    set {
      isDead_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DamageEventToC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DamageEventToC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tick != other.Tick) return false;
    if (AttackerId != other.AttackerId) return false;
    if (TargetId != other.TargetId) return false;
    if (ActionCode != other.ActionCode) return false;
    if (DamageType != other.DamageType) return false;
    if (Damage != other.Damage) return false;
    if (IsCritical != other.IsCritical) return false;
    if (IsDodged != other.IsDodged) return false;
    if (IsBlocked != other.IsBlocked) return false;
    if (RemainingHP != other.RemainingHP) return false;
    if (IsDead != other.IsDead) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Tick != 0L) hash ^= Tick.GetHashCode();
    if (AttackerId.Length != 0) hash ^= AttackerId.GetHashCode();
    if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
    if (ActionCode.Length != 0) hash ^= ActionCode.GetHashCode();
    if (DamageType.Length != 0) hash ^= DamageType.GetHashCode();
    if (Damage != 0L) hash ^= Damage.GetHashCode();
    if (IsCritical != false) hash ^= IsCritical.GetHashCode();
    if (IsDodged != false) hash ^= IsDodged.GetHashCode();
    if (IsBlocked != false) hash ^= IsBlocked.GetHashCode();
    if (RemainingHP != 0L) hash ^= RemainingHP.GetHashCode();
    if (IsDead != false) hash ^= IsDead.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Tick != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Tick);
    }
    if (AttackerId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AttackerId);
    }
    if (TargetId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(TargetId);
    }
    if (ActionCode.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ActionCode);
    }
    if (DamageType.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DamageType);
    }
    if (Damage != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(Damage);
    }
    if (IsCritical != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsCritical);
    }
    if (IsDodged != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsDodged);
    }
    if (IsBlocked != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsBlocked);
    }
    if (RemainingHP != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(RemainingHP);
    }
    if (IsDead != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsDead);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Tick != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Tick);
    }
    if (AttackerId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AttackerId);
    }
    if (TargetId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(TargetId);
    }
    if (ActionCode.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ActionCode);
    }
    if (DamageType.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DamageType);
    }
    if (Damage != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(Damage);
    }
    if (IsCritical != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsCritical);
    }
    if (IsDodged != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsDodged);
    }
    if (IsBlocked != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsBlocked);
    }
    if (RemainingHP != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(RemainingHP);
    }
    if (IsDead != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsDead);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Tick != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
    }
    if (AttackerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackerId);
    }
    if (TargetId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
    }
    if (ActionCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionCode);
    }
    if (DamageType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageType);
    }
    if (Damage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Damage);
    }
    if (IsCritical != false) {
      size += 1 + 1;
    }
    if (IsDodged != false) {
      size += 1 + 1;
    }
    if (IsBlocked != false) {
      size += 1 + 1;
    }
    if (RemainingHP != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainingHP);
    }
    if (IsDead != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DamageEventToC other) {
    if (other == null) {
      return;
    }
    if (other.Tick != 0L) {
      Tick = other.Tick;
    }
    if (other.AttackerId.Length != 0) {
      AttackerId = other.AttackerId;
    }
    if (other.TargetId.Length != 0) {
      TargetId = other.TargetId;
    }
    if (other.ActionCode.Length != 0) {
      ActionCode = other.ActionCode;
    }
    if (other.DamageType.Length != 0) {
      DamageType = other.DamageType;
    }
    if (other.Damage != 0L) {
      Damage = other.Damage;
    }
    if (other.IsCritical != false) {
      IsCritical = other.IsCritical;
    }
    if (other.IsDodged != false) {
      IsDodged = other.IsDodged;
    }
    if (other.IsBlocked != false) {
      IsBlocked = other.IsBlocked;
    }
    if (other.RemainingHP != 0L) {
      RemainingHP = other.RemainingHP;
    }
    if (other.IsDead != false) {
      IsDead = other.IsDead;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Tick = input.ReadInt64();
          break;
        }
        case 18: {
          AttackerId = input.ReadString();
          break;
        }
        case 26: {
          TargetId = input.ReadString();
          break;
        }
        case 34: {
          ActionCode = input.ReadString();
          break;
        }
        case 42: {
          DamageType = input.ReadString();
          break;
        }
        case 48: {
          Damage = input.ReadInt64();
          break;
        }
        case 56: {
          IsCritical = input.ReadBool();
          break;
        }
        case 64: {
          IsDodged = input.ReadBool();
          break;
        }
        case 72: {
          IsBlocked = input.ReadBool();
          break;
        }
        case 80: {
          RemainingHP = input.ReadInt64();
          break;
        }
        case 88: {
          IsDead = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Tick = input.ReadInt64();
          break;
        }
        case 18: {
          AttackerId = input.ReadString();
          break;
        }
        case 26: {
          TargetId = input.ReadString();
          break;
        }
        case 34: {
          ActionCode = input.ReadString();
          break;
        }
        case 42: {
          DamageType = input.ReadString();
          break;
        }
        case 48: {
          Damage = input.ReadInt64();
          break;
        }
        case 56: {
          IsCritical = input.ReadBool();
          break;
        }
        case 64: {
          IsDodged = input.ReadBool();
          break;
        }
        case 72: {
          IsBlocked = input.ReadBool();
          break;
        }
        case 80: {
          RemainingHP = input.ReadInt64();
          break;
        }
        case 88: {
          IsDead = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
